@page "/"
@page "/pages/authentication/login/{text?}"
@layout LoginLayout
@using SmartBoat.Web.Services;
@using System.Threading;
@using SmartBoat.Web.Providers;
@inject IUserService UserService;
@inject CustomAuthenticationStateProvider StateProvider;



<MudText Typo="Typo.h4" GutterBottom="true">Sign In</MudText>

<MudText>Don't have an account? <MudLink Href="/pages/authentication/register">Sign Up</MudLink></MudText>

<MudTextField T="string" @bind-Value="@Email" Label="E-mail" Variant="Variant.Outlined" Class="my-6"></MudTextField>

<MudTextField @bind-Value="@Password" Label="Password" Variant="Variant.Outlined" InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="TogglePasswordVisibility" />

<div Class="d-flex justify-space-between align-center">
    <MudCheckBox T="bool" Label="Remember me?" Color="Color.Primary" Class="ml-n1 my-3"></MudCheckBox>
    <MudLink Href="/pages/authentication/forgot-password">Forgot pwd?</MudLink>
</div>

<MudText>@Tolken</MudText>

<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OnLogin" Size="Size.Large" FullWidth="true">Sign In</MudButton>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    [Parameter]
    public string Text { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (Text == "logout")
            await UserService.Logout();

        await StateProvider.GetAuthenticationStateAsync();

        var authState = await authenticationStateTask;
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            Tolken = $"{user.Identity.Name} is authenticated.";
        }
        else
        {
            Tolken = "The user is NOT authenticated.";
        }

        await base.OnParametersSetAsync();
    }


    string Email { get; set; }
    string Password { get; set; }

    public string Tolken { get; set; }

    bool PasswordVisibility;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    void TogglePasswordVisibility()
    {
        @if (PasswordVisibility)
        {
            PasswordVisibility = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            PasswordVisibility = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    async Task OnLogin()
    {
        try
        {
            Console.WriteLine("Email: " + Email);
            Console.WriteLine("Password: " + Password);

            var response = await UserService.Login(new SmartBoat.Shared.Authentication.LoginRequest
            {
                Email = Email,
                Password = Password
            }, CancellationToken.None);

            NavigationManager.NavigateTo("/personal/dashboard");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
            Tolken = ex.Message;
        }
        
        //try
        //{
        //    var authenticationState = await StateProvider.GetAuthenticationStateAsync();

        //    Tolken = authenticationState.User?.Identity?.Name;
        //}
        //catch (Exception e)
        //{
        //    Console.WriteLine(e);
        //}
    }
}
